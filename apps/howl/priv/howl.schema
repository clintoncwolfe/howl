%% -*- erlang -*-

%% @doc Number of acceptors processes to keep around for websocket connections.
{mapping, "acceptors", "howl.acceptors",
 [{default, 100},
  {datatype, integer}]}.

%% @doc The port howl listens on for websockets
{mapping, "http_port", "howl.http_port",
 [{default, {{http_port}} },
  {datatype, integer}]}.

%% @doc Enable or disable compression
{mapping, "compression", "howl.compression",
 [{default, on},
  {datatype, flag}]}.

%% @doc Enable or disable SSL compression
{mapping, "ssl", "howl.ssl",
 [{default, on},
  {datatype, {enum, [on, off]}}]}.

%% @doc The port howl listens to.
{mapping, "ssl.port", "howl.ssl_port",
 [{default, {{ssl_port}} },
  {datatype, integer}]}.

%% @doc The SSL CA certificate.
{mapping, "ssl.cacertfile", "howl.ssl_cacertfile",
 [{default, "/data/fifo/fifo.crt"},
  {datatype, string}]}.

%% @doc The SSL Server certificate
{mapping, "ssl.certfile", "howl.ssl_certfile",
 [{default, "/data/fifo/fifo.pem"},
  {datatype, string}]}.

%% @doc The SSL Key file
{mapping, "ssl.keyfile", "howl.ssl_keyfile",
 [{default, "/data/fifo/fifo.key"},
  {datatype, string}]}.


%% @doc The TCP endpoint that will be broadcasted.
{mapping, "ip", "mdns_server_lib.listener",
 [{default, {"{{howl_ip}}", {{tcp_port}} }},
  {datatype, ip}]}.

{translation,
 "mdns_client_lib.interface",
 fun(Conf) ->
         {IP, _Port} = cuttlefish:conf_get("ip", Conf),
         [A, B, C, D] = [list_to_integer(O) ||
                            O <- re:split(IP, "\\.", [{return, list}])],
         {A, B, C, D}
 end
}.

{translation,
 "mdns_server_lib.interface",
 fun(Conf) ->
         {IP, _Port} = cuttlefish:conf_get("ip", Conf),
         [A, B, C, D] = [list_to_integer(O) ||
                            O <- re:split(IP, "\\.", [{return, list}])],
         {A, B, C, D}
 end
}.

{translation,
 "howl.tcp_port",
 fun(Conf) ->
         {_IP, Port} = cuttlefish:conf_get("ip", Conf),
         Port
 end
}.

%% @doc The mDNS domain this installation is part of
{mapping, "domain", "mdns_server_lib.domain",
 [{default, ".local"},
  {commented, ".local"},
  {datatype, string}]}.

%% @doc The livetime of a broadcast, alsot he rebroadcast frequency
{mapping, "broadcast_interval", "mdns_server_lib.ttl",
 [{default, 120},
  {commented, 120},
  {datatype, {duration, s}}]}.

%% @doc The path data gets stored into.
{mapping, "platform_data_dir", "riak_core.platform_data_dir",
 [{default, "{{platform_data_dir}}"},
  {datatype, string}]}.

{translation,
 "fifo_db.db_path",
 fun(Conf) ->
         cuttlefish:conf_get("platform_data_dir", Conf)
 end
}.

%% @doc The default TCP handler, there is very very very
%% rarely any reason to change this.
{mapping, "tcp_callback", "mdns_server_lib.handler",
 [{datatype, string},
  {level, advanced},
  {default, "howl_tcp_protocol"}]}.

{translation,
 "mdns_server_lib.handler",
 fun(Conf) ->
         Setting = cuttlefish:conf_get("tcp_callback", Conf),
         list_to_atom(Setting)
 end
}.


%% @doc The default Service that is announced, ther eis very very
%% rarely any reason to change this.
{mapping, "service", "mdns_server_lib.service",
 [{datatype, string},
  {default, "howl"}]}.

%% @doc Default ring creation size.  Make sure it is a power of 2,
%% e.g. 16, 32, 64, 128, 256, 512 etc
%% This is set to a default of 4 to work in a one server installation
%% if you plan to expand your system please set it higher and reads
%% the manual at http://bit.ly/1ciKRkS
{mapping, "ring_size", "riak_core.ring_creation_size",
 [{datatype, integer},
  {default, 64},
  {commented, 64},
  {validators, ["ring_size"]}
 ]}.

{validator, "ring_size", "not a power of 2 greater than 1",
 fun(Size) ->
         Size > 1 andalso (Size band (Size-1) =:= 0)
 end}.

%% @doc The number of copies of the data that is keeped.
%% For good consistency N  < (R + W) should be true.
{mapping, "n", "howl.n",
 [{datatype, integer},
  {default, 3},
  {commented, 3}]}.

%% @doc The number of replies requried for a read request to succeed
%% The lower the value the faster the replies but the more likely stale
%% data is returend.
{mapping, "r", "howl.r",
 [{datatype, integer},
  {default, 2},
  {commented, 2}]}.

%% @doc The number of replies requried for a write request to succeed
%% The lower the value the faster the write but the more likely to only
%% write partial data.
{mapping, "w", "howl.w",
 [{datatype, integer},
  {default, 3},
  {commented, 3}]}.

{mapping, "folsom_ddb.bucket", "folsom_ddb.bucket", [
    merge,
    {default, "fifo"}
]}.

{mapping, "folsom_ddb.prefix", "folsom_ddb.prefix", [
    merge,
    {default, "howl@127.0.0.1"}
]}.

%% @doc Schema directory
{mapping, "schema_dir", "riak_core.schema_dirs",
 [{default, "./share/schema"},
  {datatype, string}]
}.

{translation,
  "riak_core.schema_dirs",
  fun(Conf) ->
          D = cuttlefish:conf_get("schema_dir", Conf),
          [D]
  end
}.

{mapping, "folsom_ddb.bucket", "folsom_ddb.bucket", [
    merge,
    {default, "fifo"}
]}.

{mapping, "folsom_ddb.prefix", "folsom_ddb.prefix", [
    merge,
    {default, "howl"}
]}.

%% @doc handoff.ip is the network address that Riak binds to for
%% intra-cluster data handoff.
{mapping, "handoff.ip", "riak_core.handoff_ip", [
  {default, "127.0.0.1" },
  {datatype, string},
  {validators, ["valid_ipaddr"]}]}.
